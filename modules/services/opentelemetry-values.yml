agentCollector:
  enabled: false
standaloneCollector:
  enabled: true
extraEnvs:
- name: HONEYCOMB_API_KEY
  valueFrom:
    secretKeyRef:
      name: "honeycomb-creds"
      key: "api_key"
- name: HONEYCOMB_DATASET
  valueFrom:
    secretKeyRef:
      name: "honeycomb-creds"
      key: "dataset"
config:
  exporters:
    logging: {}
    otlp:
      endpoint: "api.honeycomb.io:443"
      headers:
        "x-honeycomb-team": ${HONEYCOMB_API_KEY}
        "x-honeycomb-dataset": ${HONEYCOMB_DATASET}
    otlp/metrics:
      endpoint: "api.honeycomb.io:443"
      headers:
        "x-honeycomb-team": ${HONEYCOMB_API_KEY}
        "x-honeycomb-dataset": "${HONEYCOMB_DATASET}-metrics"

  extensions:
    health_check: {}
  processors:
    batch: {}
    attributes:
      actions:
      - key: graphql.variables.input.code
        action: update
        value: "<redacted>"
      - key: code.function.params.code
        action: update
        value: "<redacted>"
      - key: code.function.params.twoFASecret
        action: update
        value: "<redacted>"
      - key: code.function.params.twoFAToken
        action: update
        value: "<redacted>"
      - key: code.function.params.body
        action: update
        value: "<redacted>"
      - key: code.function.params.macaroon
        action: update
        value: "<redacted>"
      - key: code.function.params.cert
        action: update
        value: "<redacted>"
    # If set to null, will be overridden with values based on k8s resource limits
    memory_limiter: null
    resourcedetection:
      detectors: [env, gke]
      timeout: 5s
      override: false
    k8sattributes:
      passthrough: true
  receivers:
    jaeger:
      protocols:
        grpc:
          endpoint: 0.0.0.0:14250
        thrift_http:
          endpoint: 0.0.0.0:14268
        thrift_compact:
          endpoint: 0.0.0.0:6831
        thrift_binary:
          endpoint: 0.0.0.0:6832
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
        http:
          endpoint: 0.0.0.0:4318
    prometheus:
      config:
        scrape_configs:
        - job_name: 'kube-state-metrics'
          scrape_interval: 5s
          scrape_timeout: 4s
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_name]
              regex: 'prometheus-kube-state-metrics-.*'
              action: keep
        - job_name: 'kubernetes-pods'
          scrape_interval: 10m
          scrape_timeout: 120s
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: kubernetes_pod_name
            - source_labels: [__meta_kubernetes_pod_name]
              regex: 'prometheus-kube-state-metrics-.*'
              action: drop
            - source_labels: [__meta_kubernetes_pod_name]
              regex: 'lnd.*'
              action: drop
            - source_labels: [__meta_kubernetes_pod_name]
              regex: 'dealer.*'
              action: drop

  service:
    extensions:
      - health_check
    pipelines:
      logs:
        exporters:
          - logging
        processors:
          - memory_limiter
          - batch
        receivers:
          - otlp
      metrics:
        exporters:
          - logging
          - otlp/metrics
        processors:
          - memory_limiter
          - batch
        receivers:
          - otlp
          - prometheus
      traces:
        exporters:
          - logging
          - otlp
        processors:
        - memory_limiter
        - resourcedetection
        - attributes
        - k8sattributes
        - batch
        receivers:
          - jaeger
          - otlp
ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    hostPort: 4317
    protocol: TCP
  jaeger-thrift-b:
    enabled: true
    containerPort: 6832
    servicePort: 6832
    hostPort: 6832
    protocol: UDP
  jaeger-thrift:
    enabled: true
    containerPort: 14268
    servicePort: 14268
    hostPort: 14268
    protocol: TCP
