#@ load("@ytt:data", "data")

#@ def pipeline_image():
#@   return data.values.docker_registry + "/galoy-deployments-pipeline"
#@ end

#@ def task_image_config():
type: registry-image
source:
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ pipeline_image()
#@ end

#@ def testflight_task_params():
GOOGLE_CREDENTIALS: #@ data.values.testflight_gcp_creds
SSH_PRIVATE_KEY: #@ data.values.testflight_ssh_private_key
SSH_PUB_KEY: #@ data.values.testflight_ssh_pub_key
TESTFLIGHT_ADMINS: #@ data.values.testflight_admins
KUBE_HOST: #@ data.values.concourse_tf_kube_host
KUBE_CA_CERT: #@ data.values.concourse_tf_kube_ca_cert
KUBE_TOKEN: #@ data.values.concourse_tf_kube_token
TF_VAR_gcp_project: galoy-infra-testflight
TF_VAR_enable_services: false
TF_VAR_destroyable_postgres: true
BRANCH: #@ data.values.git_branch
#@ end

#@ def slack_failure_notification():
#@ fail_url = "<$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| :face_with_symbols_on_mouth: $BUILD_JOB_NAME> failed!"
put: slack
params:
  channel:  #@ data.values.slack_channel
  username: #@ data.values.slack_username
  icon_url: https://cl.ly/2F421Y300u07/concourse-logo-blue-transparent.png
  text:    #@ fail_url
#@ end

#@ def slack_success_notification():
#@ success_url = "<$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| :zap: $BUILD_JOB_NAME> completed!"
put: slack
params:
  channel:  #@ data.values.slack_channel
  username: #@ data.values.slack_username
  icon_url: https://cl.ly/2F421Y300u07/concourse-logo-blue-transparent.png
  text:    #@ success_url
#@ end

groups:
- name: testflight-gcp
  jobs:
  - testflight-bootstrap-gcp
  - testflight-inception-gcp
  - testflight-platform-gcp
  - testflight-services-gcp
  - testflight-cleanup-gcp
  - bump-repos
- name: k8s-upgrade
  jobs:
  - check-and-upgrade-k8s
- name: testflight-azure
  jobs:
  - testflight-bootstrap-azure

jobs:
- name: testflight-bootstrap-gcp
  serial: true
  plan:
  - put: testflight-lock
    params: { claim: gcp-testflight }
  - in_parallel:
    - { get: modules, trigger: true}
    - { get: repo }
    - { get: pipeline-tasks }
    - { get: testflight-uid }
  - task: bootstrap
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: modules
      - name: testflight-uid
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/bootstrap.sh
  - #@ slack_success_notification()
  on_failure: #@ slack_failure_notification()

- name: testflight-inception-gcp
  serial: true
  plan:
  - { get: testflight-lock, passed: [testflight-bootstrap-gcp] }
  - in_parallel:
    - { get: modules, trigger: true, passed: [testflight-bootstrap-gcp]}
    - { get: repo, trigger: true, passed: [testflight-bootstrap-gcp] }
    - { get: pipeline-tasks }
    - { get: testflight-uid, passed: [testflight-bootstrap-gcp] }
  - task: inception
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: modules
      - name: testflight-uid
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/inception.sh
  - #@ slack_success_notification()
  on_failure: #@ slack_failure_notification()

- name: testflight-platform-gcp
  serial: true
  plan:
  - { get: testflight-lock, passed: [testflight-inception-gcp] }
  - in_parallel:
    - { get: modules, trigger: true, passed: [testflight-inception-gcp]}
    - { get: repo, trigger: true, passed: [testflight-inception-gcp] }
    - { get: pipeline-tasks }
    - { get: testflight-uid, passed: [testflight-inception-gcp] }
  - task: platform
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: modules
      - name: testflight-uid
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/platform.sh
  - #@ slack_success_notification()
  on_failure: #@ slack_failure_notification()

- name: testflight-services-gcp
  serial: true
  plan:
  - { get: testflight-lock, passed: [testflight-platform-gcp] }
  - in_parallel:
    - { get: modules, trigger: true, passed: [testflight-platform-gcp]}
    - { get: repo, trigger: true, passed: [testflight-platform-gcp] }
    - { get: pipeline-tasks }
    - { get: testflight-uid, passed: [testflight-platform-gcp] }
  - task: services
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: modules
      - name: testflight-uid
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/services.sh
  - #@ slack_success_notification()
  on_failure: #@ slack_failure_notification()

- name: testflight-cleanup-gcp
  plan:
  - { get: testflight-lock, passed: [testflight-services-gcp] }
  - in_parallel:
    - { get: modules, passed: [testflight-services-gcp], trigger: true}
    - { get: repo, trigger: true, passed: [testflight-services-gcp] }
    - { get: pipeline-tasks }
    - { get: testflight-uid, passed: [testflight-services-gcp] }
  - task: teardown
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: modules
      - name: testflight-uid
      outputs:
      - name: repo
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/teardown.sh
  - in_parallel:
    - {put: testflight-lock, params: {release: testflight-lock}}
    - {put: testflight-uid, params: {bump: patch}}


- name: bump-repos
  plan:
  - in_parallel:
    - { get: galoy-staging }
    - { get: modules, passed: [testflight-cleanup-gcp], trigger: true}
    - { get: repo, trigger: true, passed: [testflight-cleanup-gcp], params: { fetch_tags: false } }
    - { get: pipeline-tasks }
  - task: bump-repos
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: galoy-staging
      - name: pipeline-tasks
      - name: modules
      - name: repo
      outputs:
      - name: repo
      - name: galoy-staging
      params:
        BRANCH: #@ data.values.git_branch
        GITHUB_SSH_KEY: #@ data.values.github_private_key
      run:
        path: pipeline-tasks/ci/tasks/bump-repos.sh
  - in_parallel:
    - put: repo
      params:
        repository: repo
        rebase: true
    - put: galoy-staging
      params:
        repository: galoy-staging
        rebase: true

- name: check-and-upgrade-k8s
  plan:
  - in_parallel:
    - get: daily-trigger-resource
      trigger: true
    - get: repo
    - get: pipeline-tasks
  - task: check-and-upgrade-k8s
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: repo
      - name: pipeline-tasks
      outputs:
      - name: repo
      params:
        BRANCH: #@ data.values.git_branch
      run:
        path: pipeline-tasks/ci/tasks/check-and-upgrade-k8s.sh
  - put: repo
    params:
      repository: repo
      rebase: true

- name: testflight-bootstrap-azure
  serial: true
  plan:
  - put: testflight-lock
    params: { claim: azure-testflight }
  - in_parallel:
    - { get: modules, trigger: true}
    - { get: repo }
  - task: bootstrap
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: repo
      - name: modules
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/bootstrap-azure.sh

resources:
- name: repo
  type: git
  source:
    ignore_paths: ["ci/*[^md]"]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
- name: modules
  type: git
  source:
    paths: ["modules"]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
- name: pipeline-tasks
  type: git
  source:
    paths: [ci/tasks/*, ci/k8s-upgrade/*, Makefile]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
- name: galoy-staging
  type: git
  source:
    uri: #@ data.values.deployments_git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: testflight-lock
  type: pool
  source:
    uri: git@github.com:GaloyMoney/concourse-locks.git
    branch: main
    pool: infra-testflight
    private_key: #@ data.values.github_private_key

- name: slack
  type: slack-notification
  source:
    url: #@ data.values.slack_webhook_url

- name: testflight-uid
  type: semver
  source:
    initial_version: 0.0.0
    driver: git
    file: version
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_version_branch
    private_key: #@ data.values.github_private_key

- name: daily-trigger-resource
  type: time
  source:
    start: 1:00 AM
    stop: 2:00 AM

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: latest

- name: cepler-in
  type: registry-image
  source:
    repository: cepler/cepler-concourse-resource
    tag: latest

- name: cepler-out
  type: registry-image
  source:
    repository: cepler/cepler-concourse-resource
    tag: latest

- name: honeymarker
  type: docker-image
  source:
    repository: #@ data.values.docker_registry + "/honeymarker-resource"
    tag: edge

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
