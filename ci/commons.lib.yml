#@ load("@ytt:data", "data")

#@ def testflight_group_name(cloud):
#@   return cloud + "-testflight"
#@ end

#@ def testflight_bootstrap_job_name(cloud):
#@   return testflight_group_name(cloud) + "-bootstrap"
#@ end

#@ def testflight_inception_job_name(cloud):
#@   return testflight_group_name(cloud) + "-inception"
#@ end

#@ def testflight_platform_job_name(cloud):
#@   return testflight_group_name(cloud) + "-platform"
#@ end

#@ def testflight_postgresql_job_name(cloud):
#@   return testflight_group_name(cloud) + "-postgresql"
#@ end

#@ def testflight_smoketest_job_name(cloud):
#@   return testflight_group_name(cloud) + "-smoketest"
#@ end

#@ def testflight_cleanup_postgresql_job_name(cloud):
#@   return testflight_group_name(cloud) + "-postgresql-cleanup"
#@ end

#@ def testflight_cleanup_job_name(cloud):
#@   return testflight_group_name(cloud) + "-cleanup"
#@ end

#@ def bump_repos_job_name(cloud):
#@   return cloud + "-bump-repos"
#@ end

#@ def build_pipeline_image_job_name(cloud):
#@   return "build-" + cloud + "-pipeline-image"
#@ end

#@ def modules_resource_name(cloud):
#@   return cloud + "-modules"
#@ end

#@ def common_resources():
- name: repo
  type: git
  source:
    ignore_paths: ["ci/*[^md]"]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: pipeline-tasks
  type: git
  source:
    paths: [ci/tasks/*, ci/k8s-upgrade/*, Makefile]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: galoy-staging
  type: git
  source:
    uri: #@ data.values.deployments_git_uri
    branch: main
    private_key: #@ data.values.github_private_key

- name: slack
  type: slack-notification
  source:
    url: #@ data.values.slack_webhook_url

#@ end

#@ def resource_types():
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: latest

- name: cepler-in
  type: registry-image
  source:
    repository: cepler/cepler-concourse-resource
    tag: latest

- name: cepler-out
  type: registry-image
  source:
    repository: cepler/cepler-concourse-resource
    tag: latest

- name: honeymarker
  type: docker-image
  source:
    repository: #@ data.values.docker_registry + "/honeymarker-resource"
    tag: edge

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
#@ end

---

#@ def slack_success_notification():
#@ success_url = "<$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| :zap: $BUILD_JOB_NAME> completed!"
put: slack
params:
  channel:  #@ data.values.slack_channel
  username: #@ data.values.slack_username
  icon_url: https://cl.ly/2F421Y300u07/concourse-logo-blue-transparent.png
  text:    #@ success_url
#@ end

#@ def slack_failure_notification():
#@ fail_url = "<$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| :face_with_symbols_on_mouth: $BUILD_JOB_NAME> failed!"
put: slack
params:
  channel:  #@ data.values.slack_channel
  username: #@ data.values.slack_username
  icon_url: https://cl.ly/2F421Y300u07/concourse-logo-blue-transparent.png
  text:    #@ fail_url
#@ end
